public class CircularDoublyLL {
	Node head;
	static class Node
	{
		int data;
		Node next,prev;
		Node(int data)
		{
			this.data=data;
		}
	}
	void insertLast(int data)
	{
		Node  new_node=new Node(data);
		if(head==null)
		{
			new_node.next=new_node;
			new_node.prev=new_node;
			head=new_node;
			return;
		}
		Node curr=head.prev;
		new_node.next=head;
		head.prev=new_node;
		new_node.prev=curr;
		curr.next=new_node;
	}
	void insertBeg(int data)
	{
		Node  new_node=new Node(data);
		if(head==null)
		{
			new_node.next=new_node;
			new_node.prev=new_node;
			head=new_node;
			return;
		}
		new_node.prev=head.prev;
		new_node.next=head;
		head.prev.next=new_node;
		head.prev=new_node;
		head=new_node;
	}
	void insertAfter(int after,int data)
	{
		Node new_node=new Node(data);
		Node curr=head;
		while(curr.next!=head)
		{
			if(curr.data==after)
			{
				new_node.next=curr.next;
				new_node.prev=curr;
				curr.next.prev=new_node;
				curr.next=new_node;
			}
			curr=curr.next;
		}
	}
	void print()
	{ 
		int length=1;
		Node curr=head;
		while(curr.next!=head)
		{
			System.out.println(curr.data);
			curr=curr.next;
			length++;
		}
		System.out.println(curr.data);
		System.out.println("length is "+length);
	}
	public static void main(String[] args) 
	{
		CircularDoublyLL obj=new CircularDoublyLL();            
		obj.insertLast(1);
		obj.insertLast(2);
		obj.insertLast(3);
		obj.insertLast(4);
//		obj.insertBeg(1);
//		obj.insertBeg(2);
//		obj.insertBeg(3);
//		obj.insertBeg(4);
		obj.insertAfter(4,5);
		obj.print();      //printing elements and length
	}
}

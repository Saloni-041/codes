public class CircularLinkedList 
{ 
	Node last;
	static class Node
	{
		int data;
		Node next;
		Node(int data)
		{
			this.data=data;
		}
	}
	void insertBeg(int data)
	{
		Node new_node=new Node(data);
		if(last==null)
		{
			new_node.next=new_node;
			last=new_node;
			return;
		}
		Node curr=last;
		new_node.next=last.next;
		last.next=new_node;
	}
	void print()
	{
		Node curr=last.next;      // Pointing to first Node of the list.
		// Traversing the list.
		do
		{
			System.out.println(curr.data);
			curr=curr.next;
		}while(curr!=last.next);
	}
	void insertEnd(int data)
	{
		Node new_node=new Node(data);
		if(last==null)
		{
			new_node.next=new_node;
			last=new_node;
			return;
		}
		new_node.next=last.next;
		last.next=new_node;
		last=new_node;
	}
	void insertAfter(int data,int item)
	{ 
		Node new_node=new Node(data);
		if(last==null)
			return;
		Node curr=last.next;
	   do
	   {
		 if(curr.data==item)
		 {
			 new_node.next=curr.next;
			 curr.next=new_node;
		 if(curr==last)
		 {
			 last=new_node;
		 }
		 return;
		 }
		 curr=curr.next;
	   }while(curr!=last.next);
	}
	public static void main(String[] args) 
	{
		CircularLinkedList obj=new CircularLinkedList();   
//        obj.insertBeg(1);
//        obj.insertBeg(2);
//        obj.insertBeg(3);
//        obj.insertBeg(4);
        obj.insertEnd(1);
        obj.insertEnd(2);
        obj.insertEnd(3);
        obj.insertEnd(4);
        obj.insertAfter(5,4);
        obj.print();
	}
}
